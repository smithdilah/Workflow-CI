name: Deploy Student Performance Model

# ───────────────────────────────
#  Trigger
# ───────────────────────────────
on:
  push:
    branches: [main]        # jalan otomatis setiap kali push ke branch main
  workflow_dispatch:        # bisa dijalankan manual dari tab Actions

# ───────────────────────────────
#  Job
# ───────────────────────────────
jobs:
  train-deploy:
    runs-on: ubuntu-latest

    # ► ENV GLOBAL ◄
    env:
      # ↳ ganti URL Dagshub sesuai repo Dagshub‑mu
      MLFLOW_TRACKING_URI: https://dagshub.com/smithdilah/students_dagshub.mlflow/
      MLFLOW_TRACKING_USERNAME: smithdilah
      # password/token Dagshub disimpan di GitHub Secrets
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}

    steps:
      # 1. checkout kode
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. set‑up Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 3. tampilkan info environment (debug)
      - name: Check environment
        run: |
          python --version
          echo "URI  : $MLFLOW_TRACKING_URI"
          echo "USER : $MLFLOW_TRACKING_USERNAME"
          echo "PWD? : ${MLFLOW_TRACKING_PASSWORD:+YES}"
          ls -R

      # 4. install dependensi (ambil dari requirements.txt di folder MLProject)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r MLProject/requirements.txt

      # 5. jalankan MLflow project
      - name: Run MLflow project
        run: |
          mlflow run MLProject \
            --env-manager=local \
            --run-name rf_student_model \
            --experiment-name "Students_Performance_RF"

      # 6. ambil run_id terakhir (paling baru) dari eksperimen
      - name: Get latest MLflow run_id
        id: get_run
        run: |
          python <<'PY'
          import mlflow, os, json
          client = mlflow.tracking.MlflowClient()
          exp = client.get_experiment_by_name("Students_Performance_RF")
          runs = client.search_runs(exp.experiment_id, order_by=["start_time DESC"], max_results=1)
          run_id = runs[0].info.run_id
          print("RUN_ID:", run_id)
          # tulis ke output untuk dipakai step berikutnya
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"run_id={run_id}\n")
          PY

      # 7. download artefak model (autolog biasanya ↦ path 'model')
      - name: Download model artifacts
        run: |
          mlflow artifacts download \
            --run-id ${{ steps.get_run.outputs.run_id }} \
            --artifact-path model \
            -d ./model_dir

      # 8. unggah artefak ke GitHub Actions (agar bisa diunduh manual)
      - name: Upload model artifact
        uses: actions/upload-artifact@v4
        with:
          name: rf_model
          path: ./model_dir

      # 9. bangun image Docker dari model
      - name: Build Docker image
        run: |
          mlflow models build-docker \
            --model-uri ./model_dir \
            --name smithdilah/student-performance-model

      # 10. login Docker Hub (username & password disimpan di Secrets)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 11. tag & push image
      - name: Push Docker image
        run: |
          docker tag smithdilah/student-performance-model smithdilah/student-performance-model:latest
          docker push smithdilah/student-performance-model:latest
