name: students MLflow

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  MLFLOW_TRACKING_URI: https://dagshub.com/smithdilah/students_dagshub.mlflow
  MLFLOW_TRACKING_USERNAME: smithdilah
  MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}

jobs:
  train-log-model:
    runs-on: ubuntu-latest

    steps:
      # Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup Python
      - name: Set up Python 3.12.7
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"

      # Cek environment & struktur file
      - name: Check Environment
        run: |
          python --version
          echo "MLFLOW_TRACKING_URI : $MLFLOW_TRACKING_URI"
          echo "MLFLOW_TRACKING_USERNAME : $MLFLOW_TRACKING_USERNAME"
          echo "MLFLOW_TRACKING_PASSWORD exists? : ${MLFLOW_TRACKING_PASSWORD:+YES}"
          ls -R

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r MLProject/requirements.txt

      # Run training & logging model
      - name: Run MLflow modeling script
        run: |
          cd MLProject
          python modeling.py

      # Get latest MLflow run_id
      - name: Get latest MLflow run_id
        id: get_run
        run: |
          echo "import mlflow, os" > get_run.py
          echo "mlflow.set_tracking_uri(\"$MLFLOW_TRACKING_URI\")" >> get_run.py
          echo "client = mlflow.tracking.MlflowClient()" >> get_run.py
          echo "exp = client.get_experiment_by_name(\"students-experiment\")" >> get_run.py
          echo "if exp is None: raise Exception(\"Experiment 'students-experiment' not found!\")" >> get_run.py
          echo "runs = client.search_runs(exp.experiment_id, order_by=[\"start_time DESC\"], max_results=1)" >> get_run.py
          echo "run_id = runs[0].info.run_id" >> get_run.py
          echo "print(\"Found RUN_ID:\", run_id)" >> get_run.py
          echo "with open(os.environ[\"GITHUB_OUTPUT\"], \"a\") as f: f.write(f\"run_id={run_id}\\n\")" >> get_run.py
          python get_run.py

      # Download model.pkl from DagsHub artifacts
      - name: Download model.pkl from DagsHub
        run: |
          mkdir -p ./model_dir
          curl -L -u "$MLFLOW_TRACKING_USERNAME:$MLFLOW_TRACKING_PASSWORD" \
            "https://dagshub.com/smithdilah/students_dagshub.mlflow/raw/mlruns/0/${{ steps.get_run.outputs.run_id }}/artifacts/model/model.pkl" \
            -o ./model_dir/model.pkl

      # Upload model artifact (opsional)
      - name: Upload model artifact
        uses: actions/upload-artifact@v4
        with:
          name: rf_model
          path: ./model_dir
